const fs = require('fs');
const prompt = require('prompt-sync')();

const funcion√°rioFilePath = 'funcion√°rio.json';

// Fun√ß√£o para carregar dados do arquivo JSON
function loadFuncion√°rio() {
    if (!fs.existsSync(funcion√°rioFilePath)) {
        fs.writeFileSync(funcion√°rioFilePath, JSON.stringify([]));
    }
    const data = fs.readFileSync(funcion√°rioFilePath);
    return JSON.parse(data);
}

// Fun√ß√£o para salvar dados no arquivo JSON
function saveFuncion√°rio(funcion√°rioList) {
    fs.writeFileSync(funcion√°rioFilePath, JSON.stringify(funcion√°rioList, null, 2));
}

// Fun√ß√£o para validar CPF
function validarCPF(cpf) {
    cpf = cpf.replace(/[^\d]+/g, '');
    if (cpf.length !== 11 || /^(\d)\1+$/.test(cpf)) return false;

    let soma = 0, resto;
    for (let i = 1; i <= 9; i++) soma += parseInt(cpf.substring(i - 1, i)) * (11 - i);
    resto = (soma * 10) % 11;
    if (resto === 10 || resto === 11) resto = 0;
    if (resto !== parseInt(cpf.substring(9, 10))) return false;

    soma = 0;
    for (let i = 1; i <= 10; i++) soma += parseInt(cpf.substring(i - 1, i)) * (12 - i);
    resto = (soma * 10) % 11;
    if (resto === 10 || resto === 11) resto = 0;
    return resto === parseInt(cpf.substring(10, 11));
}

// Fun√ß√£o para validar e-mail
function validarEmail(email) {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
}

// Fun√ß√£o para cadastrar um novo funcion√°rio
function cadastrarFuncion√°rio() {
    const funcion√°rioList = loadFuncion√°rio();

    console.log('\n--- Cadastrar Novo Funcion√°rio ---');
    const nome = prompt('Nome: ');
    const funcao = prompt('Fun√ß√£o: ');
    const email = prompt('Email: ');
    const cpf = prompt('CPF: ');
    const telefone = prompt('Telefone: ');
    const dataContratacao = prompt('Data de Contrata√ß√£o (DD/MM/AAAA): ');
    const salario = parseFloat(prompt('Sal√°rio: '));
    const departamento = prompt('Departamento: ');

    if (!nome || !funcao || !validarEmail(email) || !validarCPF(cpf) || isNaN(salario)) {
        console.log('‚ö†Ô∏è Erro: Dados inv√°lidos! Verifique o CPF, e-mail e sal√°rio.');
        return;
    }

    const novoFuncion√°rio = {
        id: funcion√°rioList.length + 1,
        nome,
        funcao,
        email,
        cpf,
        telefone,
        dataContratacao,
        salario,
        departamento,
        dataRegistro: new Date().toLocaleString()
    };

    funcion√°rioList.push(novoFuncion√°rio);
    saveFuncion√°rio(funcion√°rioList);
    console.log('‚úÖ Funcion√°rio cadastrado com sucesso!');
}

// Fun√ß√£o para excluir um funcion√°rio
function excluirFuncion√°rio() {
    const funcion√°rioList = loadFuncion√°rio();

    console.log('\n--- Excluir Funcion√°rio ---');
    const id = parseInt(prompt('Digite o ID do funcion√°rio a ser exclu√≠do: '));

    const √≠ndice = funcion√°rioList.findIndex(funcion√°rio => funcion√°rio.id === id);
    if (√≠ndice === -1) {
        console.log('‚ö†Ô∏è Funcion√°rio n√£o encontrado.');
        return;
    }

    const funcion√°rio = funcion√°rioList[√≠ndice];
    console.log(`Funcion√°rio encontrado: ${funcion√°rio.nome} (${funcion√°rio.id})`);

    const confirmar = prompt(`Tem certeza que deseja excluir o funcion√°rio ${funcion√°rio.nome}? (s/n): `).toLowerCase();
    if (confirmar === 's') {
        funcion√°rioList.splice(√≠ndice, 1);
        saveFuncion√°rio(funcion√°rioList);
        console.log('‚úÖ Funcion√°rio exclu√≠do com sucesso!');
    } else {
        console.log('Exclus√£o cancelada.');
    }
}

// Fun√ß√£o para editar um funcion√°rio
function editarFuncion√°rio() {
    const funcion√°rioList = loadFuncion√°rio();

    console.log('\n--- Editar Funcion√°rio ---');
    const id = parseInt(prompt('Digite o ID do funcion√°rio a ser editado: '));

    const √≠ndice = funcion√°rioList.findIndex(funcion√°rio => funcion√°rio.id === id);
    if (√≠ndice === -1) {
        console.log('‚ö†Ô∏è Funcion√°rio n√£o encontrado.');
        return;
    }

    const funcion√°rio = funcion√°rioList[√≠ndice];
    console.log(`Funcion√°rio encontrado: ${funcion√°rio.nome} (${funcion√°rio.id})`);

    const nome = prompt(`Nome (atual: ${funcion√°rio.nome}): `) || funcion√°rio.nome;
    const funcao = prompt(`Fun√ß√£o (atual: ${funcion√°rio.funcao}): `) || funcion√°rio.funcao;
    const email = prompt(`Email (atual: ${funcion√°rio.email}): `) || funcion√°rio.email;
    const cpf = prompt(`CPF (atual: ${funcion√°rio.cpf}): `) || funcion√°rio.cpf;
    const telefone = prompt(`Telefone (atual: ${funcion√°rio.telefone}): `) || funcion√°rio.telefone;
    const dataContratacao = prompt(`Data de Contrata√ß√£o (atual: ${funcion√°rio.dataContratacao}): `) || funcion√°rio.dataContratacao;
    const salario = parseFloat(prompt(`Sal√°rio (atual: ${funcion√°rio.salario}): `)) || funcion√°rio.salario;
    const departamento = prompt(`Departamento (atual: ${funcion√°rio.departamento}): `) || funcion√°rio.departamento;

    if (!validarEmail(email) || !validarCPF(cpf) || isNaN(salario)) {
        console.log('‚ö†Ô∏è Erro: Dados inv√°lidos! Verifique o CPF, e-mail e sal√°rio.');
        return;
    }

    funcion√°rioList[√≠ndice] = {
        ...funcion√°rioList[√≠ndice],
        nome,
        funcao,
        email,
        cpf,
        telefone,
        dataContratacao,
        salario,
        departamento,
        dataRegistro: new Date().toLocaleString()
    };

    saveFuncion√°rio(funcion√°rioList);
    console.log('‚úÖ Funcion√°rio editado com sucesso!');
}

// Fun√ß√£o para mostrar a lista de funcion√°rios com op√ß√µes avan√ßadas
function mostrarListaFuncion√°rioAvancada() {
    const funcion√°rioList = loadFuncion√°rio();

    console.log('\n--- Lista de Funcion√°rios (Avan√ßada) ---');
    if (funcion√°rioList.length === 0) {
        console.log('Nenhum Funcion√°rio cadastrado.');
        return;
    }

    const filtro = prompt('Filtrar por departamento (ou pressione Enter para ignorar): ');
    let listaFiltrada = funcion√°rioList;

    if (filtro) {
        listaFiltrada = funcion√°rioList.filter(funcion√°rio => 
            funcion√°rio.departamento.toLowerCase().includes(filtro.toLowerCase())
        );
        if (listaFiltrada.length === 0) {
            console.log(`Nenhum funcion√°rio encontrado no departamento "${filtro}".`);
            return;
        }
    }

    const colunaOrdenacao = prompt('Ordenar por (nome/salario/dataContratacao): ').toLowerCase();
    const ordenacaoValida = ['nome', 'salario', 'dataContratacao'];
    if (ordenacaoValida.includes(colunaOrdenacao)) {
        listaFiltrada.sort((a, b) => {
            if (colunaOrdenacao === 'salario') {
                return a.salario - b.salario;
            } else if (colunaOrdenacao === 'dataContratacao') {
                return new Date(a.dataContratacao) - new Date(b.dataContratacao);
            } else {
                return a.nome.localeCompare(b.nome);
            }
        });
    }

    const porPagina = parseInt(prompt('Quantos registros por p√°gina? (padr√£o: 5): ')) || 5;
    let paginaAtual = 1;
    const totalPaginas = Math.ceil(listaFiltrada.length / porPagina);

    while (true) {
        console.log(`\n--- P√°gina ${paginaAtual}/${totalPaginas} ---`);
        console.log('ID | Nome     | Fun√ß√£o  | Email              | CPF        | Tel       | Sal√°rio | Dep.     | Data');
        console.log('-------------------------------------------------------------------------------------------------');
    
        const inicio = (paginaAtual - 1) * porPagina;
        const fim = inicio + porPagina;
    
        listaFiltrada.slice(inicio, fim).forEach(funcion√°rio => {
            console.log(
                `${funcion√°rio.id.toString().padStart(2, ' ')} | ${funcion√°rio.nome.padEnd(10, ' ')} | ${funcion√°rio.funcao.padEnd(7, ' ')} | ${funcion√°rio.email.padEnd(18, ' ')} | ${funcion√°rio.cpf} | ${funcion√°rio.telefone} | ${funcion√°rio.salario.toFixed(2)} | ${funcion√°rio.departamento} | ${funcion√°rio.dataContratacao}`
            );
        });

        if (paginaAtual < totalPaginas) {
            const proximaPagina = prompt('Pressione Enter para pr√≥xima p√°gina, ou "s" para sair: ').toLowerCase();
            if (proximaPagina === 's') break;
            paginaAtual++;
        } else {
            break;
        }
    }
}

// Fun√ß√£o para exibir os cr√©ditos
function exibirCreditos() {
    console.log("\nüåü === Cr√©ditos === üåü");
    console.log("üë§ Desenvolvedor: snipermaskdev");
    console.log("ü§ù Colaboradores: Nenhum");
    console.log("üõ†Ô∏è Projeto: Sistema de Cadastro e Gest√£o de Funcion√°rio");
    console.log("‚ú® Funcionalidades:");
    console.log("   ‚úÖ Cadastro de novos funcion√°rios com valida√ß√µes de CPF, e-mail e data.");
    console.log("   ‚úèÔ∏è Edi√ß√£o e exclus√£o de funcion√°rios com hist√≥rico atualizado.");
    console.log("   üîç Busca avan√ßada por m√∫ltiplos crit√©rios (nome, fun√ß√£o, departamento, etc...).");
    console.log("   üìã Lista ordenada e exibida de forma clara e organizada.");
    console.log("   üóÇÔ∏è Registro autom√°tico de a√ß√µes em logs para auditoria.");
    console.log("üöÄ Este sistema foi projetado para ser flex√≠vel, eficiente e confi√°vel.");
    console.log("üìÖ √öltima atualiza√ß√£o: 19/12/2024");
    console.log("üì¢ Obrigado por utilizar o sistema! üíº");
    console.log("üîß Vers√£o: 1.0");
}

// Fun√ß√£o de menu principal
function menuPrincipal() {
    while (true) {
        console.log('\n--- Menu Principal ---');
        console.log('1. Cadastrar Funcion√°rio');
        console.log('2. Excluir Funcion√°rio');
        console.log('3. Editar Funcion√°rio');
        console.log('4. Mostrar Lista de Funcion√°rios');
        console.log('5. Mostrar Lista de Funcion√°rios Avan√ßada');
        console.log('6. Cr√©ditos');
        console.log('7. Sair');
        
        const opcao = prompt('Escolha uma op√ß√£o: ');

        if (opcao === '1') {
            cadastrarFuncion√°rio();
        } else if (opcao === '2') {
            excluirFuncion√°rio();
        } else if (opcao === '3') {
            editarFuncion√°rio();
        } else if (opcao === '4') {
            mostrarListaFuncion√°rio();
        } else if (opcao === '5') {
            mostrarListaFuncion√°rioAvancada();
        } else if (opcao === '6') {
            exibirCreditos();
        } else if (opcao === '7') {
            console.log('Saindo...');
            break;
        } else {
            console.log('Op√ß√£o inv√°lida, tente novamente.');
        }
    }
}

// Iniciar o menu principal
menuPrincipal();